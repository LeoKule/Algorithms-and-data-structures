#include <iostream>
#include <stack>
#include <string>

bool isBalanced(const std::string& expression) { // ф-ция проверки правильности скобочной последовательности
    std::stack<char> stack;

    for (char c : expression) {
        if (c == '(' || c == '[' || c == '{') { // если текущий символ "с" - открывающая скобка, мы помещаем его в стек
            stack.push(c);
        } else if (c == ')' || c == ']' || c == '}') { // Если текущий символ c - закрывающая скобка мы проверяем, не пуст ли стек.
            if (stack.empty()) { //  Если стек пуст, это означает, что нет соответствующей открывающей скобки, и мы возвращаем false.
                return false;
            }

            char top = stack.top(); // Если стек не пуст, мы извлекаем верхний элемент из стека (stack.top()).
            stack.pop(); //  и удаляем его из стека (stack.pop()).

            if ((c == ')' && top != '(') || // Затем мы сравниваем текущую закрывающую скобку "c" с соответствующей открывающей скобкой "top".
                (c == ']' && top != '[') || //  Если скобки не совпадают (например, ) и [), то это недопустимо, и мы возвращаем false.
                (c == '}' && top != '{')) {
                return false;
            }
        }
    }

    return stack.empty(); // После завершения цикла проверяем, остались ли какие-либо элементы в стеке.
    // Если стек пуст, это означает, что все скобки были правильно сбалансированы, и мы возвращаем true. В противном случае возвращаем false.
}

int main() {
    setlocale(LC_ALL, "Russian");

    std::string input;
    std::cout << "Введите строку: ";
    std::cin >> input;

    if (isBalanced(input)) {
        std::cout << "Строка сбалансирована." << std::endl;
    } else {
        std::cout << "Строка не сбалансирована." << std::endl;
    }

    return 0;
}
